{"ts":1347066207608,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/* \nTODO: implement standard Matrix 3D functions + operations\nTODO: implement relevant rotation functions - ASK OLI\nTODO: function to convert AffTrnsfrm to a format compatible w/ OpenGL\n*/\n\n/*--- CONSTRUCTOR ---*/ \nfunction Matrix(a11, a12, a13, a21, a22, a23, a31, a32, a33)\n{\n    // reusable vars\n    var i = -1;\n    var j = -1;\n    \n    this.m = [ a11, a12, a13, \n               a21, a22, a23, \n               a31, a32, a33];\n    \n    this.set = function(a11, a12, a13, a21, a22, a23, a31, a32, a33)\n    {\n        this.m = [a11,a12,a13,  a21,a22,a23,  a31,a32,a33];\n        return \"set(): what shall i return?\";\n    };\n    \n    this.toIdentity = function()\n    {\n        this.m = [1,0,0, 0,1,0, 0,0,1];\n        return \"toIdentity(): what shall i return?\";\n    };\n    \n    this.toZero = function()\n    {\n        this.m = [0,0,0, 0,0,0, 0,0,0];\n        return \"toZero(): what shall i return?\";\n    };\n    \n    this.toOnes = function()\n    {\n        this.m = [1,1,1, 1,1,1, 1,1,1];\n        return \"toOnes(): what shall i return?\";\n    };\n    \n    this.add = function()\n    {\n        if(arguments.length == 9)\n        {\n            for(i=0 ; i < arguments.length; i++)\n                this.m[i] += arguments[i];\n            return this.m;\n        }\n        else\n            return false;\n\n    };\n    \n    this.subtr = function()\n    {\n        if(arguments.length === 9)\n        {\n            for(i=0 ; i < arguments.length; i++)\n                this.m[i] -= arguments[i];\n            return this.m;\n        }\n        else\n            return false;\n    };\n    \n    this.mult = function()\n    {\n        return false;\n    };\n\n    this.vectormult = function()\n    {\n        return false;\n    };\n\n    this.scalarmult = function()\n    {\n        return false;\n    };\n\n    this.div = function()\n    {\n        return false;\n    };\n\n    this. transpose = function()\n    {\n        return false;\n    };\n    \n    this.det = function()\n    {\n        return false;\n    };\n    \n    this.invert = function()\n    {\n        return false;\n    };\n\n    this.equals = function()\n    {\n        var valid = (arguments.length === 9);\n        i = 0;\n        while(valid === true && i < 9)\n        {\n            valid &= (this.m[i] === arguments[i]);\n            i++;\n        }\n        return valid;\n    };\n    \n    this.toString = function() \n    {\n        var ms = \"\";\n        for(i = 0; i < 3; i++) {\n            for(j = 0; j < 3; j++) {\n                ms += this.m[i * 3 + j];\n            }\n            ms += '</br>';\n        }\n        return ms;\n    };\n}\n\n\n\n\n\n"]],"start1":0,"start2":0,"length1":0,"length2":2537}]],"length":2537}
